{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Komp\\\\Desktop\\\\WebDev\\\\NextApp\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.image,\n    title: props.title,\n    description: props.description,\n    address: props.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 12\n  }, this);\n};\n\nexport default MeetupDetails;\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\"mongodb+srv://Touney3108:31081999@meetups.muqbkdn.mongodb.net/?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://Touney3108:31081999@meetups.muqbkdn.mongodb.net/?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  console.log(ObjectId(meetupid));\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: id\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        address: selectedMeetup.address\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Komp/Desktop/WebDev/NextApp/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","image","title","description","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","paths","map","meetup","params","meetupId","toString","fallback","getStaticProps","context","console","log","meetupid","selectedMeetup","findOne","id","meetupData"],"mappings":";;AAAA,SAAQA,WAAR,EAAqBC,QAArB,QAAqC,SAArC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAGA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAE7B,sBAAO,QAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAAK,CAACC,KAA3B;AACH,IAAA,KAAK,EAAED,KAAK,CAACE,KADV;AAEH,IAAA,WAAW,EAAEF,KAAK,CAACG,WAFhB;AAGH,IAAA,OAAO,EAAEH,KAAK,CAACI;AAHZ;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH,CAPD;;AASA,eAAeL,aAAf;AAGA,OAAO,MAAMM,cAAc,GAAG,YAAY;AACtC,QAAMC,MAAM,GAAC,MAAMV,WAAW,CAACW,OAAZ,CAAoB,4FAApB,CAAnB;AACI,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEJ,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAK;AACrBC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAZ;AADa,KAAL,CAAlB,CADJ;AAGHC,IAAAA,QAAQ,EAAC;AAHN,GAAP;AAKH,CAZM;AAeP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC7C,QAAMJ,QAAQ,GAAGI,OAAO,CAACL,MAAR,CAAeC,QAAhC;AAEA,QAAMd,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,4FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAY7B,QAAQ,CAAC8B,QAAD,CAApB;AACA,QAAMC,cAAc,GAAG,MAAMnB,iBAAiB,CAACoB,OAAlB,CAA0B;AACnDhB,IAAAA,GAAG,EAAEiB;AAD8C,GAA1B,CAA7B;AAGAxB,EAAAA,MAAM,CAACS,KAAP;AAGA,SAAO;AACHf,IAAAA,KAAK,EAAE;AACH+B,MAAAA,UAAU,EAAE;AACRD,QAAAA,EAAE,EAACF,cAAc,CAACf,GAAf,CAAmBQ,QAAnB,EADK;AAERpB,QAAAA,KAAK,EAAC2B,cAAc,CAAC3B,KAFb;AAGRC,QAAAA,KAAK,EAAC0B,cAAc,CAAC1B,KAHb;AAIRC,QAAAA,WAAW,EAACyB,cAAc,CAACzB,WAJnB;AAKRC,QAAAA,OAAO,EAACwB,cAAc,CAACxB;AALf;AADT;AADJ,GAAP;AAWH,CAzBM","sourcesContent":["import {MongoClient, ObjectId } from \"mongodb\"\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\n\r\nconst MeetupDetails = (props) => {\r\n    \r\n    return <MeetupDetail image={props.image}\r\n        title={props.title}\r\n        description={props.description}\r\n        address={props.address}\r\n    />\r\n}\r\n\r\nexport default MeetupDetails;\r\n\r\n\r\nexport const getStaticPaths = async () => {\r\n    const client=await MongoClient.connect(\"mongodb+srv://Touney3108:31081999@meetups.muqbkdn.mongodb.net/?retryWrites=true&w=majority\")\r\n        const db = client.db();\r\n\r\n    const meetupsCollection = db.collection(\"meetups\");\r\n    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n    client.close();\r\n    return {\r\n        paths: meetups.map(meetup => ({\r\n                 params: { meetupId: meetup._id.toString() } })),\r\n        fallback:false,\r\n    };\r\n}\r\n\r\n\r\nexport const getStaticProps = async (context) => {\r\n    const meetupId = context.params.meetupId;\r\n\r\n    const client = await MongoClient.connect(\"mongodb+srv://Touney3108:31081999@meetups.muqbkdn.mongodb.net/?retryWrites=true&w=majority\")\r\n    const db = client.db();\r\n\r\n    const meetupsCollection = db.collection(\"meetups\");\r\n    console.log(ObjectId(meetupid));\r\n    const selectedMeetup = await meetupsCollection.findOne({\r\n        _id: id,\r\n    });\r\n    client.close();\r\n\r\n\r\n    return {\r\n        props: {\r\n            meetupData: {\r\n                id:selectedMeetup._id.toString(),\r\n                image:selectedMeetup.image ,\r\n                title:selectedMeetup.title ,\r\n                description:selectedMeetup.description,\r\n                address:selectedMeetup.address,\r\n            }\r\n        },\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}